var request = require('request');
var EasyStar = require('easystarjs');

function Bot(key, mode, url) {
  this.key = key;
  this.mode = mode || 'training';
  this.serverURL = url === undefined ? 'http://vindinium.org' : url;
  this.URL = this.serverURL + '/api/' + this.mode;
}

Bot.prototype.run = function(cb) {
  request.post({url: this.URL, form: {key: this.key}}, function(err, res, body) {
    this.data = JSON.parse(body);
    this.playURL = this.data.playUrl;
    console.log('first run');
    cb(this.data);
  });
  if(this.data.game.finished !== true) {
    setInterval(function() {
      request.post({url: this.playURL, form: {key: this.key, dir: cb(this.data)}}, function(err, res, body) {
        console.log('run');
      });
    }, 500);
  }
  /*@Desc: Each of the characters organized into their own objects with position, health, mines owned
   *num = the number of the bot
   *health = current health
   */
  this.bot1 = {
    pos:{
      x: Bot.data.game.heroes[0].pos.x,
      y: Bot.data.game.heroes[0].pos.y,
    },
    life: Bot.data.game.heroes[0].life,
    mineCount: Bot.data.game.heroes[0].mineCount
  };
  this.bot2 = {
    pos:{
      x: Bot.data.game.heroes[1].pos.x,
      y: Bot.data.game.heroes[1].pos.y,
    },
    life: Bot.data.game.heroes[1].life,
    mineCount: Bot.data.game.heroes[1].mineCount
  };
  this.bot3 = {
    pos:{
      x: Bot.data.game.heroes[2].pos.x,
      y: Bot.data.game.heroes[2].pos.y,
    },
    life: Bot.data.game.heroes[2].life,
    mineCount: Bot.data.game.heroes[2].mineCount
  };
  this.bot4 = {
    pos:{
      x: Bot.data.game.heroes[3].pos.x,
      y: Bot.data.game.heroes[3].pos.y,
    },
    life: Bot.data.game.heroes[3].life,
    mineCount: Bot.data.game.heroes[3].mineCount
  };
  this.yourBot = {
  };
  if(Bot.data.hero.id === 1){this.yourBot = this.bot1}
  if(Bot.data.hero.id === 2){this.yourBot = this.bot2}
  if(Bot.data.hero.id === 3){this.yourBot = this.bot3}
  if(Bot.data.hero.id === 4){this.yourBot = this.bot4}
  /* @DescRepackaging the bot.data so that it is more useful for the students.
   *
   * Bot.data currently holds the information from the JSON file in an object.
   *
   * botN will be an object with the botN's position and health
   *
   * map will be an array with the data for the map.
   *  " " = Walkable
   *  "#" = wall
   *  1 = hero 1
   *  2 = hero 2
   *  3 = hero 3
   *  4 = hero 4
   *  "t" = Tavern
   *  "m" = unoned Mine
   *  "a" "b" "c" "d" = Player Owned Mine by player 1, 2, 3, 4 respectively
   */
  var tempMap = Bot.data.game.board;
  var tempMapSize = Bot.data.game.board.size;

  //Creates the nested array to hold the map
  this.map = [];
  for(var i = 0; i < tempMapSize; i++){
    map.push([]);
  }
  for(var i = 0; i < tempMapSize; i++){
    for(var j = 0; j < tempMapSize; j++){
      map[i].push([]);
    }
  }

  var counter = 0;
  var xPos = 0;
  var yPos = 0;
  for(var i = 0; i < (tempMapSize * tempMapSize * 2); i+=2){
    yPos = counter;
    console.log(tempMap[i]);
    if(tempMap[i] === "#") {map[xPos][yPos] = "#";}
    if(tempMap[i] === " ") {map[xPos][yPos] = " ";}
    if(tempMap[i] === "[") {map[xPos][yPos] = "t";}
    if(tempMap[i] === "@") {
      map[xPos][yPos] = tempMap[i+1];
    }
    if(tempMap[i] === "$") {
      if(tempMap[i+1] === "1"){
        map[xPos][yPos] = "a";
      }
      else if(tempMap[i+1] === "2"){
        map[xPos][yPos] = "b";
      }
      else if(tempMap[i+1] === "3"){
        map[xPos][yPos] = "c";
      }
      else if(tempMap[i+1] === "4"){
        map[xPos][yPos] = "d";
      }
      else{
        map[xPos][yPos] = "m";
      }
    }

    counter++;
    if(counter === tempMapSize){
      counter = 0;
      xPos++;
    }
  }
};

Bot.prototype.helpers = {

  /*@Desc: Creates a helpers.pathfinder method for users that will take the location of two items on the map and return the direction
   * that the chracter should go in order to reach the second object based on A* pathfinding
   *@Params - two arrays - each array must have two ints, equal to the X, Y coordinates on the map. Should be  equal to the [x][y] in the map object.
   */

  pathfinder: function(pos1, pos2) {
    var pathFinderMap = this.map;
    //commented out because the map does not need to be modified because easyStar allows you to specify what is walkable
    /*for(var i = 0; i < this.map.length; i++){
      for(var j = 0; j < this.map[i].length; i++){
      if(pathFinderMap[i][j] !== 0) pathFinderMap[i][j] === "#";
      }
      }
      */
    // pathfinder code
    // initializes the EasyStar pathfinding module
    var easystar = new EasyStar.js();
    easystar.setGrid(pathFinderMap);
    easystar.setAcceptableTiles([" "]);
    easystar.findPath(pos1[0], pos1[1], pos2[0], pos2[1], function( path ) {
      if (path === null) {
        return false; // No path found
      }
      else {
        if(path[0].x === pos1[0]){
          if(path[0].y > pos1[1]){
            return "north";
          }
          else{
            return "south";
          }
        }
        else{
          if(path[0].x > pos1[0]){
            return "east";
          }
          else{
            return "west";
          }

        }

      }
      //return [path[0].x, path[0].y]; // The x, y coordinates of the next place to go
    });
  },

};

module.exports = Bot;
