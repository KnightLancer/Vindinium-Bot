var request = require('request');
var EasyStar = require('easystarjs');
var async = require('async');
var Promise = require('es6-promise').Promise;
var bot;

function Bot(key, mode, url) {
  this.key = key;
  this.mode = mode || 'training';
  this.serverURL = url === undefined ? 'http://vindinium.org' : url;
  this.URL = this.serverURL + '/api/' + this.mode;
  this.counter;
  this.gameStart = true;
  bot = this;
  console.log("at bot creation: " + this.key);
}

Bot.prototype.runGame = function(){
  console.log("promise sendREquest");
  bot.sendRequest().then(function(){
    console.log("promise parse");
    bot.parseTheData()}).then(function(){
      console.log("promise botBrain");
      bot.botBrain()}).then(function(){
        console.log("startingOver!");
        bot.runGame()}); 
};

Bot.prototype.sendRequest = function (){
  var _this = bot;
  return new Promise(function(resolve, reject){
    var _this = bot;
    console.log("play URL :" +  _this.URL +  " : " + _this.playURL);
    console.log("going to post first startgame:" + _this.URL + ", " + _this.key);    
    if(_this.gameStart === true){   
      _this.gameStart = false;
      request.post({url: _this.URL, form: {key: _this.key}}, function(err, res, body) {
        _this.data = JSON.parse(body);
        console.log("This is view URL from first start: " + _this.data.viewUrl);
        _this.playURL = _this.data.playUrl;
        console.log("this is playURL and playUrl" + _this.data.playUrl + ":" + _this.playURL);
        resolve();
      })
    }
    else{
      console.log("requestingAgain!" + turnDir); 
      console.log("_this at newRequest: " + _this.key);
      console.log(turnDir); 
      if(_this.data.game.finished !== true){
        request.post({url: _this.data.playURL, form: {key: _this.key, dir: turnDir}}, function(err, res, body){
        console.log("doh" + _this.data.viewUrl);
        resolve(); 
        })
      }
    }
  }) 
};
Bot.prototype.parseTheData = function (){
 return new Promise(function(resolve, reject){ 
  var _this = bot;
  /*@Desc: Each of the characters organized into their own objects with position, health, mines owned
   *health = current health
   */
  console.log("haha... actually parsing");
  console.log("praseTheData: " + _this.data);
  
  _this.bot1 = {
    pos:{
      x: _this.data.game.heroes[0].pos.x,
      y: _this.data.game.heroes[0].pos.y,
    },
    life: _this.data.game.heroes[0].life,
    mineCount: _this.data.game.heroes[0].mineCount
  };
  _this.bot2 = {
    pos:{
      x: _this.data.game.heroes[1].pos.x,
      y: _this.data.game.heroes[1].pos.y,
    },
    life: _this.data.game.heroes[1].life,
    mineCount: _this.data.game.heroes[1].mineCount
  };
  _this.bot3 = {
    pos:{
      x: _this.data.game.heroes[2].pos.x,
      y: _this.data.game.heroes[2].pos.y,
    },
    life: _this.data.game.heroes[2].life,
    mineCount: _this.data.game.heroes[2].mineCount
  };
  _this.bot4 = {
    pos:{
      x: _this.data.game.heroes[3].pos.x,
      y: _this.data.game.heroes[3].pos.y,
    },
    life: _this.data.game.heroes[3].life,
    mineCount: _this.data.game.heroes[3].mineCount
  };
  _this.yourBot = {
  };
  if(_this.data.hero.id === 1){_this.yourBot = _this.bot1}
  if(_this.data.hero.id === 2){_this.yourBot = _this.bot2}
  if(_this.data.hero.id === 3){_this.yourBot = _this.bot3}
  if(_this.data.hero.id === 4){_this.yourBot = _this.bot4}
  console.log(_this.yourBot.life);
  /* @DescRepackaging the bot.data so that it is more useful for the students.
   *
   * Bot.data currently holds the information from the JSON file in an object.
   *
   * botN will be an object with the botN's position and health
   *
   * map will be an array with the data for the map.
   *  " " = Walkable
   *  "#" = wall
   *  1 = hero 1
   *  2 = hero 2
   *  3 = hero 3
   *  4 = hero 4
   *  "t" = Tavern
   *  "m" = unoned Mine
   *  "a" "b" "c" "d" = Player Owned Mine by player 1, 2, 3, 4 respectively
   */


  var tempMap = _this.data.game.board.tiles;
  var tempMapSize = _this.data.game.board.size;
  _this.map = [];
  for(var i = 0; i < tempMapSize; i++){
    _this.map.push([]);
  }
  for(var i = 0; i < tempMapSize; i++){
    for(var j = 0; j < tempMapSize; j++){
      _this.map[i].push([]);
    }
  }

  var counter = 0;
  var xPos = 0;
  var yPos = 0;
  for(var i = 0; i < (tempMapSize * tempMapSize * 2); i+=2){
    yPos = counter;
    if(tempMap[i] === "#") {_this.map[xPos][yPos] = "#";}
    if(tempMap[i] === " ") {_this.map[xPos][yPos] = " ";}
    if(tempMap[i] === "[") {_this.map[xPos][yPos] = "t";}
    if(tempMap[i] === "@") {
      _this.map[xPos][yPos] = tempMap[i+1];
    }
    if(tempMap[i] === "$") {
      if(tempMap[i+1] === "1"){
        _this.map[xPos][yPos] = "a";
      }
      else if(tempMap[i+1] === "2"){
        _this.map[xPos][yPos] = "b";
      }
      else if(tempMap[i+1] === "3"){
        _this.map[xPos][yPos] = "c";
      }
      else if(tempMap[i+1] === "4"){
        _this.map[xPos][yPos] = "d";
      }
      else{
        _this.map[xPos][yPos] = "m";
      }
    }
    counter++;
    if(counter === tempMapSize){
      counter = 0;
      xPos++;
    }
  }
  resolve();  
})};

  

/*  ////THIS IS AN ATTEMPT USING ASYNC///
Bot.prototype.runBot = function(){
  async.series([
    function(callback){
      console.log("async Startgame()");
      if(gameStart === false){
        gameStart = true;
        bot.startGame();
        console.log("startGame Bot: " + bot.data);
      }
      else{
       bot.newRequest(bot.goDir);
       console.log("newRequest Bot: " + bot.data);
      }
      callback();
    },
    function(callback){
      console.log("async parseTheData()");
      bot.parseTheData();
      console.log("parseTheData Bot: " + bot.data);
      callback();
    },
    function(callback){
      console.log("async botBrain");
      bot.botBrain();
      callback();
    }
  ])
};
*/

/*


////HelpersObject  Starting from here ////
Bot.prototype.helpers = {

  /*@Desc: Creates a helpers.pathfinder method for users that will take the location of two items on the map and return the direction
   * that the chracter should go in order to reach the second object based on A* pathfinding
   *@Params - two arrays - each array must have two ints, equal to the X, Y coordinates on the map. Should be  equal to the [x][y] in the map object.
   */


/*



  pathfinder: function(pos1, pos2) {
    var pathFinderMap = _this.map;
    //commented out because the map does not need to be modified because easyStar allows you to specify what is walkable
    /*for(var i = 0; i < _this.map.length; i++){
      for(var j = 0; j < _this.map[i].length; i++){
      if(pathFinderMap[i][j] !== 0) pathFinderMap[i][j] === "#";
      }
      }
      */
    // pathfinder code
    // initializes the EasyStar pathfinding module

/*

    var easystar = new EasyStar.js();
    easystar.setGrid(pathFinderMap);
    easystar.setAcceptableTiles([" "]);
    easystar.findPath(pos1[0], pos1[1], pos2[0], pos2[1], function( path ) {
      if (path === null) {
        return false; // No path found
      }
      else {
        if(path[0].x === pos1[0]){
          if(path[0].y > pos1[1]){
            return "north";
          }
          else{
            return "south";
          }
        }
        else{
          if(path[0].x > pos1[0]){
            return "east";
          }
          else{
            return "west";
          }

        }

      }
      //return [path[0].x, path[0].y]; // The x, y coordinates of the next place to go
    });

  },

};
*/
module.exports = Bot;
